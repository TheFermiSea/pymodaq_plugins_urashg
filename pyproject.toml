[features] # defines the plugin features contained into this plugin
instruments = true  # true if plugin contains instrument classes (else false, notice the lowercase for toml files)
extensions = true   # true if plugins contains dashboard extensions
models = false      # true if plugins contains pid models
h5exporters = false # true if plugin contains custom h5 file exporters
scanners = false    # true if plugin contains custom scan layout (daq_scan extensions)

[urls]
package-url = 'https://github.com/TheFermiSea/pymodaq_plugins_urashg'

[project]
name = "pymodaq_plugins_urashg"
description = 'PyMoDAQ plugin package for URASHG (micro Rotational Anisotropy Second Harmonic Generation) microscopy systems'
dependencies = [
    "pymodaq>=5.0.0",
    "pymodaq-gui>=5.0.0",
    "pymodaq-data>=5.0.0",
    "pymodaq-utils>=0.0.14",
    "numpy>=1.20.0",
    "pyqtgraph>=0.12.0",
    "h5py>=3.0.0",
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
    "pyserial>=3.4",
    "elliptec>=0.0.6",
    "pyqt6>=6.9.1",
    "pyvcam; sys_platform != 'darwin' or platform_machine != 'arm64'",
    "pyyaml>=6.0.2",
    "pandas>=2.3.2",
    "paramiko>=4.0.0",
    "rpyc>=6.0.2",
    "quamash>=0.6.1",
    "scp>=0.15.0",
]

authors = [{ name = "TheFermiSea", email = "squires.b@gmail.com" }]
maintainers = [{ name = "TheFermiSea", email = "squires.b@gmail.com" }]

# nottodo: leave everything below as is!

dynamic = ["version", "urls", "entry-points"]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
]

[build-system]
requires = ["hatchling>=1.9.0", "hatch-vcs", "toml", "pymodaq_utils>=0.0.14"]
build-backend = "hatchling.build"

[tool.hatch.metadata.hooks.custom]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pymodaq_plugins_urashg"]
known_third_party = ["pymodaq", "numpy", "PyQt6", "pyqtgraph"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "hardware: marks tests as requires hardware",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:Parameter has no default value:DeprecationWarning:pyqtgraph.*",
    "ignore:Importing Parameter stuff from pymodaq is deprecated:DeprecationWarning:pymodaq.*",
    "ignore:Importing math_utils stuff from pymodaq is deprecated:DeprecationWarning:pymodaq.*",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
    "examples/*",
    "*/pyrpl_mock.py",  # Mock files don't need testing
    "*/mock_*.py",
    "*/device_scanner.py",  # Hardware discovery tool - tested manually
    "*/parameter_utils.py", # Utility functions - tested indirectly
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 1
skip_covered = false
skip_empty = true

[tool.uv.sources]
pyvcam = { git = "https://github.com/Photometrics/PyVCAM.git" }

[dependency-groups]
dev = [
    "pytest-cov>=6.2.1",
    "pytest-timeout",
    "pyserial",
    "pymodaq",
    "pyqt6",
]
