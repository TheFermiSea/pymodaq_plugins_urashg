[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pymodaq-plugins-urashg"
version = "0.1.0"
description = "PyMoDAQ plugin package for URASHG (micro Rotational Anisotropy Second Harmonic Generation) microscopy systems"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "TheFermiSea", email = "squires.b@gmail.com" }]
maintainers = [
    { name = "PyMoDAQ Plugin Development Team", email = "contact@pymodaq.org" },
]
keywords = [
    "PyMoDAQ",
    "plugin",
    "Î¼RASHG",
    "SHG",
    "microscopy",
    "second harmonic generation",
    "polarimetry",
    "optics",
    "laser control",
    "automation",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pymodaq>=5.0.0",
    "pymodaq-gui>=5.0.0",
    "pymodaq-data>=5.0.0",
    "pymodaq-utils>=0.0.14",
    "numpy>=1.20.0",
    "PySide6>=6.0.0",
    "pyqtgraph>=0.12.0",
    "h5py>=3.0.0",
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
    "pyserial>=3.4",
    "elliptec>=0.0.6",
]

[project.optional-dependencies]
hardware = [
    "pyvcam",  # Camera support (optional - not available in all environments)
]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-qt>=4.0",
    "pytest-mock>=3.0",
    "pytest-xvfb>=3.0",
    "black>=21.0",
    "flake8>=3.9",
    "isort>=5.0",
    "pre-commit>=2.15",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.15",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-qt>=4.0",
    "pytest-mock>=3.0",
    "pytest-xvfb>=3.0",
    "pytest-benchmark>=4.0",
]
hardware = [
    # Hardware-specific dependencies (optional for basic functionality)
    "opencv-python>=4.5.0", # Image processing
    "scikit-image>=0.18.0", # Advanced image analysis
]
pyrpl = [
    # PyRPL Red Pitaya control integration (optional)
    "pyrpl>=0.9.3", # PyRPL library
]
mock = [
    "pymodaq-plugins-mock>=1.0.0", # For testing without hardware
]
galvo = [
    "pymodaq-plugins-daqmx>=1.0.0", # Future galvo mirror integration
    "nidaqmx>=0.6.0",               # National Instruments DAQ
]

[project.urls]
Homepage = "https://github.com/PyMoDAQ/pymodaq_plugins_urashg"
Documentation = "https://pymodaq-plugins-urashg.readthedocs.io/"
Repository = "https://github.com/PyMoDAQ/pymodaq_plugins_urashg"
Issues = "https://github.com/PyMoDAQ/pymodaq_plugins_urashg/issues"
Changelog = "https://github.com/PyMoDAQ/pymodaq_plugins_urashg/blob/main/CHANGELOG.md"

[project.entry-points."pymodaq.plugins"]
urashg = "pymodaq_plugins_urashg"

[project.entry-points."pymodaq.move_plugins"]
"DAQ_Move_Elliptec" = "pymodaq_plugins_urashg.daq_move_plugins.daq_move_Elliptec:DAQ_Move_Elliptec"
"DAQ_Move_MaiTai" = "pymodaq_plugins_urashg.daq_move_plugins.daq_move_MaiTai:DAQ_Move_MaiTai"
"DAQ_Move_ESP300" = "pymodaq_plugins_urashg.daq_move_plugins.daq_move_ESP300:DAQ_Move_ESP300"

[project.entry-points."pymodaq.viewer_plugins"]
"DAQ_2DViewer_PrimeBSI" = "pymodaq_plugins_urashg.daq_viewer_plugins.plugins_2D.daq_2Dviewer_PrimeBSI:DAQ_2DViewer_PrimeBSI"
"DAQ_0DViewer_Newport1830C" = "pymodaq_plugins_urashg.daq_viewer_plugins.plugins_0D.daq_0Dviewer_Newport1830C:DAQ_0DViewer_Newport1830C"

[project.entry-points."pymodaq.extensions"]
# Primary comprehensive extension for multi-device coordination
"URASHGMicroscopyExtension" = "pymodaq_plugins_urashg.extensions.urashg_microscopy_extension:URASHGMicroscopyExtension"

[tool.setuptools]
packages = ["pymodaq_plugins_urashg"]
package-dir = { "" = "src" }

[tool.setuptools.package-data]
pymodaq_plugins_urashg = [
    "resources/*",
    "examples/*",
    "docs/*",
    "*.yaml",
    "*.json",
    "*.xml",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pymodaq_plugins_urashg"]
known_third_party = ["pymodaq", "numpy", "PySide6", "pyqtgraph"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=pymodaq_plugins_urashg --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "hardware: marks tests that require hardware (deselect with '-m \"not hardware\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "camera: marks tests for camera functionality",
    "device_manager: marks tests for device manager functionality",
    "plugin: marks tests for plugin functionality",
    "extension: marks tests for extension functionality",
    "measurement_worker: marks tests for measurement worker functionality",
    "threading: marks tests for threading functionality",
    "performance: marks tests for performance",
    "pymodaq_standards: marks tests for PyMoDAQ standards compliance",
    "plugin_integration: marks tests for plugin integration",
    "suite_overview: marks test suite overview tests",
    "compliance_critical: marks critical compliance tests",
    "integration_full: marks full integration tests",
]

[tool.coverage.run]
source = ["src/pymodaq_plugins_urashg"]
omit = ["*/tests/*", "*/examples/*", "*/docs/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# UV-specific configuration
[tool.uv]
dev-dependencies = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.9",
    "isort>=5.0",
    "pre-commit>=2.15",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.15",
]

# UV workspace configuration
[tool.uv.workspace]
members = [".", "examples/*"]

# UV sources for development dependencies
[tool.uv.sources]
pyvcam = { git = "https://github.com/Photometrics/PyVCAM.git" }
# Hardware packages can be installed manually when needed:
# uv add "pyvcam @ git+https://github.com/Photometrics/PyVCAM.git"
# uv add "elliptec @ git+https://github.com/roesel/elliptec.git"
